@use "sass:math";
// Dart Sass 2.0.0からは / 演算子の代わりに math.div() 関数を使用する必要がある。
// 現時点ではまだ / 演算子は使用可能だが構文エラーとなる。

// $baseFontSizeという変数名に16という値が代入される。
// function（自作関数）は自分で作る関数。
// Sassで自作関数を定義する方法は、以下のように記述します。
// 引数を囲む( )は、引数があってもなくても必要です。
// @function 関数名(引数) {
//   @return
// }

// remをpx感覚で使う関数
$baseFontsize: 16;
@function rem($pixel) {
	@return math.div($pixel, $baseFontsize) * 1rem;
}

// vwをpx感覚で使う関数（自作）
$viewport-width: (
	sp: 375,
	tab: 768,
	pc: 1440,
);

@function vw($vp, $pixel) {
	$viewport: map-get($viewport-width, $vp); // ピクセル数を取得
	@return math.div($pixel, $viewport) * 100vw; // vwに変換して返す
}

// vw別パターン（動作は同じ）
// @function vw-sp($pixel) {
// 	$viewport: 768; // 基準となるビューポート
// 	@return math.div($pixel, $viewport) * 100vw;
// }

// @function vw-pc($pixel) {
// 	$viewport: 1440; // 基準となるビューポート
// 	@return math.div($pixel, $viewport) * 100vw;
// }

// vhをpx感覚で使う関数（自作）
$viewport-height: (
	sp: 667,
	tab: 1024,
	pc: 740,
);

@function vh($vp, $pixel) {
	$viewport: map-get($viewport-height, $vp); // ピクセル数を取得
	@return math.div($pixel, $viewport) * 100vh; // vhに変換して返す
}

// line-height自動計算
// デザインカンプ記載の数値を2つ入力するだけで自動計算
@function lh($pixels, $height) {
	@return math.div($height, $pixels);
}

// letter-spacing自動計算
@function ls($spacing) {
	@return math.div($spacing, 1000) + rem;
}
